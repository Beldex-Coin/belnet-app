plugins {
    id "com.android.library"
    id "kotlin-android"
    id "com.diffplug.spotless" // Removed version here to prevent conflict
}

group = "io.beldex.belnet_lib"
version = "1.0-SNAPSHOT"

android {
    namespace "io.beldex.belnet.lib"
    compileSdk 35
    ndkVersion "21.3.6528147"

    sourceSets {
        main {
            java.srcDirs += ["src/main/java", "src/main/kotlin"]
            jniLibs.srcDirs += ["src/main/jniLibs"]
        }
    }

    defaultConfig {
        minSdk 23
        targetSdk 35
    }

    lint {
        disable "InvalidPackage"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

spotless {
    java {
        target "$projectDir/src/main/java/**/*.java"
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        prettier()
    }
    groovyGradle {
        importOrder()
        target "*.gradle"
        greclipse()
    }
    kotlin {
        target "$projectDir/src/main/kotlin/**/*.kt"
        ktfmt()
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.20"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
}

tasks.register("cleanNativeLibs", Delete) {
    delete "$projectDir/../external/belnet/build-android"
}

tasks.register("compileNativeLibs", Exec) {
    def f = new File("$projectDir/../external/belnet/contrib/android.sh")
    if (f.exists()) {
        workingDir "$projectDir/../external/belnet"
        environment "NDK", project.android.ndkDirectory
        executable "./contrib/android.sh"
    } else {
        executable "true"
    }
}

tasks.register("ensureNativeLibs", Copy) {
    from("$projectDir/../external/belnet/build-android") {
        include "out/*/*.so"
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
    }
    into "$projectDir/src/main/jniLibs/"
}

tasks.named("preBuild") {
    dependsOn tasks.named("ensureNativeLibs")
}

tasks.named("ensureNativeLibs") {
    dependsOn tasks.named("compileNativeLibs")
}

tasks.named("clean") {
    dependsOn tasks.named("cleanNativeLibs")
}
